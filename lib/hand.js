// Generated by CoffeeScript 1.9.3
(function() {
  var Hand, _calculate, _combinations, _ranks;

  Hand = function(cards) {
    var best, j, len, result, set, sets;
    if (cards == null) {
      cards = [];
    }
    cards = cards.filter(function(card) {
      var r;
      r = _ranks.indexOf(card.rank);
      return r > -1 && card.suit;
    });
    best = {
      cards: cards,
      name: 'nothing',
      value: 0
    };
    sets = _combinations(cards, 5);
    for (j = 0, len = sets.length; j < len; j++) {
      set = sets[j];
      result = _calculate(set);
      if (best.value < result.value) {
        best = result;
      }
    }
    return best;
  };

  _ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace'];

  _combinations = function(cards, k) {
    var card, head, i, j, l, len, len1, m, ref, result, tail, tails;
    if (k > cards.length) {
      return [];
    } else if (k === cards.length) {
      return [cards];
    } else if (k === 1) {
      result = [];
      for (j = 0, len = cards.length; j < len; j++) {
        card = cards[j];
        result.push([card]);
      }
      return result;
    } else {
      result = [];
      for (i = l = 0, ref = cards.length - k; l <= ref; i = l += 1) {
        head = cards.slice(i, i + 1);
        tails = _combinations(cards.slice(i + 1), k - 1);
        for (m = 0, len1 = tails.length; m < len1; m++) {
          tail = tails[m];
          result.push(head.concat(tail));
        }
      }
      return result;
    }
  };

  _calculate = function(cards) {
    var card, flush, i, j, l, len, len1, m, r, r1, r2, rank, ranked, ref, result, str, straight, v, val;
    ranked = [];
    flush = true;
    for (i = j = 0, len = cards.length; j < len; i = ++j) {
      card = cards[i];
      if (i > 0 && card.suit !== cards[i - 1].suit) {
        flush = false;
      }
      r = _ranks.indexOf(card.rank);
      if (ranked[r] == null) {
        ranked[r] = [];
      }
      ranked[r].push(card);
    }
    ranked = ranked.filter(function(rank) {
      return rank !== void 0;
    });
    ranked.reverse();
    ranked.sort(function(a, b) {
      if (a.length > b.length) {
        return -1;
      } else if (a.length < b.length) {
        return 1;
      } else {
        return 0;
      }
    });
    r1 = _ranks.indexOf(ranked[0][0].rank);
    if (ranked[4]) {
      r2 = _ranks.indexOf(ranked[4][0].rank);
    }
    straight = r2 && ((r1 - r2) === 4);
    result = {
      cards: cards
    };
    val = 0;
    if (straight && flush && r1 === 12) {
      result.name = 'royal flush';
      val = 9;
    } else if (straight && flush) {
      result.name = 'straight flush';
      val = 8;
    } else if (ranked[0].length === 4) {
      result.name = 'four of a kind';
      val = 7;
    } else if (ranked[0].length === 3 && ranked[1].length === 2) {
      result.name = 'full house';
      val = 6;
    } else if (flush) {
      result.name = 'flush';
      val = 5;
    } else if (straight) {
      result.name = 'straight';
      val = 4;
    } else if (ranked[0].length === 3) {
      result.name = 'three of a kind';
      val = 3;
    } else if (ranked[0].length === 2 && ranked[1].length === 2) {
      result.name = 'two pair';
      val = 2;
    } else if (ranked[0].length === 2) {
      result.name = 'one pair';
      val = 1;
    } else {
      result.name = 'high card';
    }
    str = '';
    for (l = 0, len1 = ranked.length; l < len1; l++) {
      rank = ranked[l];
      r = _ranks.indexOf(rank[0].rank);
      v = r < 10 ? '0' : '';
      v += r;
      for (i = m = 0, ref = ranked.length - 1; m < ref; i = m += 1) {
        str += v;
      }
    }
    result.value = (val * 10000000000) + parseInt(str);
    return result;
  };

  if (typeof module === "object" && typeof module.exports === "object") {
    module.exports = Hand;
  } else {
    window.Hand = Hand;
  }

}).call(this);
